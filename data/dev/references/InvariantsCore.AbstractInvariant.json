{"attributes":{"kind":"abstract type","backlinks":[{"tag":"documentation","title":"title","docid":"references/InvariantsCore.title"},{"tag":"sourcefile","title":"InvariantsCore/src/highlevel.jl","docid":"sourcefiles/InvariantsCore/src/highlevel.jl"},{"tag":"sourcefile","title":"InvariantsCore/src/wrapinvariant.jl","docid":"sourcefiles/InvariantsCore/src/wrapinvariant.jl"},{"tag":"sourcefile","title":"Invariants/src/tree.jl","docid":"sourcefiles/Invariants/src/tree.jl"},{"tag":"sourcefile","title":"InvariantsCore/src/invariant.jl","docid":"sourcefiles/InvariantsCore/src/invariant.jl"},{"tag":"documentation","title":"description","docid":"references/InvariantsCore.description"},{"tag":"sourcefile","title":"InvariantsCore/src/compose.jl","docid":"sourcefiles/InvariantsCore/src/compose.jl"},{"tag":"sourcefile","title":"Invariants/src/Invariants.jl","docid":"sourcefiles/Invariants/src/Invariants.jl"},{"tag":"sourcefile","title":"InvariantsCore/src/interface.jl","docid":"sourcefiles/InvariantsCore/src/interface.jl"}],"methods":[],"name":"AbstractInvariant","title":"AbstractInvariant","symbol_id":"InvariantsCore.AbstractInvariant","public":false,"module_id":"InvariantsCore"},"tag":"documentation","children":[{"attributes":{},"tag":"md","children":[{"attributes":{"lang":""},"tag":"codeblock","children":["abstract type AbstractInvariant\n"],"type":"node"},{"attributes":{},"tag":"p","children":["An ",{"attributes":{},"tag":"code","children":["Invariant"],"type":"node"}," checks if an input satisfies some invariant. For example, it may check whether a number is positive."],"type":"node"},{"attributes":{},"tag":"p","children":["For most use cases, using ",{"attributes":{"reftype":"symbol","document_id":"references/InvariantsCore.invariant"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["invariant"],"type":"node"}],"type":"node"}," to create an invariant will suffice and implementing your own subtype of ",{"attributes":{},"tag":"code","children":["AbstractInvariant"],"type":"node"}," will rarely be necessary."],"type":"node"},{"attributes":{},"tag":"p","children":["The interface of ",{"attributes":{},"tag":"code","children":["Invariant"],"type":"node"},"s is designed so that"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["the invariant can be checked, given some input"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["invariants can be composed to generate more complicated invariants"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":["the creation of rich error messages is possible when an invariant is not satisfied."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"h2","children":["Interface"],"type":"node"},{"attributes":{},"tag":"p","children":["An ",{"attributes":{},"tag":"code","children":["Invariant"],"type":"node"}," ",{"attributes":{},"tag":"code","children":["I"],"type":"node"}," must implement the following methods:"],"type":"node"},{"attributes":{},"tag":"ul","children":[{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{"reftype":"symbol","document_id":"references/InvariantsCore.title"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["title"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"code","children":["(::I)::String"],"type":"node"},": Descriptive name for the invariant"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{"reftype":"symbol","document_id":"references/InvariantsCore.description"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["description"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"code","children":["(::I)::String"],"type":"node"},": A longer description of the invariant, giving explanation and pointing to related information."],"type":"node"}],"type":"node"},{"attributes":{},"tag":"li","children":[{"attributes":{},"tag":"p","children":[{"attributes":{"reftype":"symbol","document_id":"references/InvariantsCore.satisfies"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["satisfies"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"code","children":["(::I, input) -> (nothing | msg)"],"type":"node"},": Check whether an ",{"attributes":{},"tag":"code","children":["input"],"type":"node"}," satisfies the invariant, returning either ",{"attributes":{},"tag":"code","children":["nothing"],"type":"node"}," on success or an error message."],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}