{"attributes":{"backlinks":[{"tag":"document","title":"Tutorial","docid":"documents/docs/guide.md"}],"path":"/home/runner/.julia/packages/Invariants/2ANwb/docs/examples.md","title":"Examples"},"tag":"document","children":[{"attributes":{},"tag":"md","children":[{"attributes":{},"tag":"h1","children":["Examples"],"type":"node"},{"attributes":{"class":"subtitle"},"tag":"p","children":["This page showcases some examples for commonly useful invariants that are either included in Invariants.jl or simple to construct."],"type":"node"},{"attributes":{},"tag":"span","children":[],"type":"node"},{"attributes":{},"tag":"h2","children":["Checking for method implementations"],"type":"node"},{"attributes":{},"tag":"p","children":[{"attributes":{"reftype":"symbol","document_id":"references/Invariants.hasmethod_invariant"},"tag":"reference","children":[{"attributes":{},"tag":"code","children":["hasmethod_invariant"],"type":"node"}],"type":"node"}," is an invariant that lets us check that a method exists and can be called with the given arguments. We construct it with argument names and optional default values, and check it by providing a ",{"attributes":{},"tag":"code","children":["NamedTuple"],"type":"node"}," input with values for the arguments."],"type":"node"},{"attributes":{},"tag":"p","children":["Checking that the input has a ",{"attributes":{},"tag":"code","children":["length"],"type":"node"}," method:"],"type":"node"},{"attributes":{},"tag":"codecell","children":[{"attributes":{"cell":"","lang":"julia"},"tag":"codeinput","children":[{"attributes":{"cell":"","lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"EQ","children":[{"attributes":{},"tag":"IDENTIFIER","children":["inv_length"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"DOT","children":[{"attributes":{"reftype":"symbol","document_id":"references/Invariants"},"tag":"reference","children":["Invariants"],"type":"node"},{"attributes":{},"tag":"DOT","children":["."],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{"reftype":"symbol","document_id":"references/Invariants.hasmethod_invariant"},"tag":"reference","children":["hasmethod_invariant"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"DOT","children":[{"attributes":{},"tag":"IDENTIFIER","children":["Base"],"type":"node"},{"attributes":{},"tag":"DOT","children":["."],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"IDENTIFIER","children":["length"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"COLON","children":[":"],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["xs"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n"],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/InvariantsCore.check"},"tag":"reference","children":["check"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["inv_length"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"TUPLE","children":[{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"PARAMETERS","children":[{"attributes":{},"tag":"SEMICOLON","children":[";"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["xs"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"INTEGER","children":["1"],"type":"node"},{"attributes":{},"tag":"COLON","children":[":"],"type":"node"},{"attributes":{},"tag":"INTEGER","children":["10"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"coderesult","children":[{"attributes":{},"tag":"codeblock","children":[{"mimes":{"text/html":"<span class=\"sgr32\">✔ Invariant satisfied:</span> Method <span class=\"sgr36\">Base.length(xs)</span> implemented"},"type":"leaf"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"codecell","children":[{"attributes":{"cell":"","lang":"julia"},"tag":"codeinput","children":[{"attributes":{"cell":"","lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/InvariantsCore.check"},"tag":"reference","children":["check"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["inv_length"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"TUPLE","children":[{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"PARAMETERS","children":[{"attributes":{},"tag":"SEMICOLON","children":[";"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["xs"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["nothing"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"coderesult","children":[{"attributes":{},"tag":"codeblock","children":[{"mimes":{"text/html":"<span class=\"sgr31\"><span class=\"sgr1\">⨯ Invariant not satisfied:</span></span><span class=\"sgr1\"> Method <span class=\"sgr36\">Base.length(xs)</span> implemented</span>\n\nWhen calling <span class=\"sgr36\">length</span>, got a <span class=\"sgr36\">MethodError</span>. This means that there is no method implemented for the given arguments. To fix this, please implement the following method:\n\n    Base.length<span class=\"sgr2\">(</span>xs<span class=\"sgr2\">::</span><span class=\"sgr1\">Nothing</span><span class=\"sgr2\">)</span>\n"},"type":"leaf"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{"class":"note"},"tag":"admonition","children":[{"attributes":{},"tag":"admonitiontitle","children":["Functions with side effects"],"type":"node"},{"attributes":{},"tag":"admonitionbody","children":[{"attributes":{},"tag":"p","children":["To be sure that a working method exists, ",{"attributes":{},"tag":"code","children":["hasmethod_invariant"],"type":"node"}," runs the functions on the given arguments. This means that you should not use it to check functions with side effects or long-running computations."],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["We can also construct an invariant that expects multiple arguments and provides default values. Here, we check that the ",{"attributes":{},"tag":"code","children":["getindex"],"type":"node"}," method exists and we can load the element at index 1:"],"type":"node"},{"attributes":{},"tag":"codecell","children":[{"attributes":{"cell":"","lang":"julia"},"tag":"codeinput","children":[{"attributes":{"cell":"","lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"EQ","children":[{"attributes":{},"tag":"IDENTIFIER","children":["inv_index"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"DOT","children":[{"attributes":{"reftype":"symbol","document_id":"references/Invariants"},"tag":"reference","children":["Invariants"],"type":"node"},{"attributes":{},"tag":"DOT","children":["."],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{"reftype":"symbol","document_id":"references/Invariants.hasmethod_invariant"},"tag":"reference","children":["hasmethod_invariant"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"DOT","children":[{"attributes":{},"tag":"IDENTIFIER","children":["Base"],"type":"node"},{"attributes":{},"tag":"DOT","children":["."],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"IDENTIFIER","children":["getindex"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"COLON","children":[":"],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["xs"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{},"tag":"QUOTE","children":[{"attributes":{},"tag":"COLON","children":[":"],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["idx"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"PAIR_ARROW","children":["=>"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"INTEGER","children":["1"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"NEWLINE_WS","children":["\n"],"type":"node"},{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/InvariantsCore.check"},"tag":"reference","children":["check"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["inv_index"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"TUPLE","children":[{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"PARAMETERS","children":[{"attributes":{},"tag":"SEMICOLON","children":[";"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["xs"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"VECT","children":[{"attributes":{},"tag":"LSQUARE","children":["["],"type":"node"},{"attributes":{},"tag":"INTEGER","children":["1"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"INTEGER","children":["2"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"INTEGER","children":["3"],"type":"node"},{"attributes":{},"tag":"RSQUARE","children":["]"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"coderesult","children":[{"attributes":{},"tag":"codeblock","children":[{"mimes":{"text/html":"<span class=\"sgr32\">✔ Invariant satisfied:</span> Method <span class=\"sgr36\">Base.getindex(xs, idx)</span> implemented"},"type":"leaf"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["If violated, the invariant will output ",{"attributes":{},"tag":"em","children":["contextual"],"type":"node"}," error messages based on the error encountered. If no ",{"attributes":{},"tag":"code","children":["getindex"],"type":"node"}," method is defined, we are told that a method is missing:"],"type":"node"},{"attributes":{},"tag":"codecell","children":[{"attributes":{"cell":"","lang":"julia"},"tag":"codeinput","children":[{"attributes":{"cell":"","lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/InvariantsCore.check"},"tag":"reference","children":["check"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["inv_index"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"TUPLE","children":[{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"PARAMETERS","children":[{"attributes":{},"tag":"SEMICOLON","children":[";"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["xs"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["nothing"],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"coderesult","children":[{"attributes":{},"tag":"codeblock","children":[{"mimes":{"text/html":"<span class=\"sgr31\"><span class=\"sgr1\">⨯ Invariant not satisfied:</span></span><span class=\"sgr1\"> Method <span class=\"sgr36\">Base.getindex(xs, idx)</span> implemented</span>\n\nWhen calling <span class=\"sgr36\">getindex</span>, got a <span class=\"sgr36\">MethodError</span>. This means that there is no method implemented for the given arguments. To fix this, please implement the following method:\n\n    Base.getindex<span class=\"sgr2\">(</span>xs<span class=\"sgr2\">::</span><span class=\"sgr1\">Nothing</span><span class=\"sgr2\">, </span>idx<span class=\"sgr2\">::</span><span class=\"sgr1\">Int64</span><span class=\"sgr2\">)</span>\n"},"type":"leaf"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"p","children":["If there is a method, but it throws an error, we get a different error message:"],"type":"node"},{"attributes":{},"tag":"codecell","children":[{"attributes":{"cell":"","lang":"julia"},"tag":"codeinput","children":[{"attributes":{"cell":"","lang":"julia"},"tag":"codeblock","children":[{"attributes":{},"tag":"julia","children":[{"attributes":{},"tag":"CALL","children":[{"attributes":{"reftype":"symbol","document_id":"references/InvariantsCore.check"},"tag":"reference","children":["check"],"type":"node"},{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"IDENTIFIER","children":["inv_index"],"type":"node"},{"attributes":{},"tag":"COMMA","children":[","],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"TUPLE","children":[{"attributes":{},"tag":"LPAREN","children":["("],"type":"node"},{"attributes":{},"tag":"PARAMETERS","children":[{"attributes":{},"tag":"SEMICOLON","children":[";"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"KW","children":[{"attributes":{},"tag":"IDENTIFIER","children":["xs"],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"EQ","children":["="],"type":"node"},{"attributes":{},"tag":"WHITESPACE","children":[" "],"type":"node"},{"attributes":{},"tag":"VECT","children":[{"attributes":{},"tag":"LSQUARE","children":["["],"type":"node"},{"attributes":{},"tag":"RSQUARE","children":["]"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"},{"attributes":{},"tag":"RPAREN","children":[")"],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"},{"attributes":{},"tag":"coderesult","children":[{"attributes":{},"tag":"codeblock","children":[{"mimes":{"text/html":"<span class=\"sgr31\"><span class=\"sgr1\">⨯ Invariant not satisfied:</span></span><span class=\"sgr1\"> Method <span class=\"sgr36\">Base.getindex(xs, idx)</span> implemented</span>\n\nWhen calling <span class=\"sgr36\">getindex</span>, got an unexpected error:\n\n<span class=\"sgr2\">    BoundsError: attempt to access 0-element Vector{Any} at index [1]</span>\n\nThis means that there is a method matching the given arguments, but calling it throws an error. To fix this, please debug the following method:\n\n    Base.getindex<span class=\"sgr2\">(</span>xs<span class=\"sgr2\">::</span><span class=\"sgr1\">Array</span><span class=\"sgr2\">, </span>idx<span class=\"sgr2\">::</span><span class=\"sgr1\">Int64</span><span class=\"sgr2\">)</span>\n"},"type":"leaf"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}],"type":"node"}