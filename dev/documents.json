[{"doctype":"documentation","id":"references/InvariantsCore.showdescription","title":"showdescription","text":""},{"doctype":"documentation","id":"references/Invariants.runtests","title":"runtests","text":"Equivalent to  ReTest.retest(Invariants pattern kwargs  This function is defined automatically in any module containing a  testset  possibly nested within submodules"},{"doctype":"documentation","id":"references/InvariantsCore","title":"InvariantsCore","text":""},{"doctype":"documentation","id":"references/InvariantsCore.invariant","title":"invariant","text":"inv n n nothing inv inv Bool inv Bool inv inv Create an invariant with name  title  that checks an input against  fn  which returns either  nothing  when the invariant is satisfied or an error message when the invariant is violated Wrap an invariant  inv  replacing some of its attributes Combine multiple invariants  invs  logically The third argument defines how they are combined If it is  all  the resulting invariant requires all  invariants  to pass while a value of  any  results in an invariant where only one of the  invariants  has to be satisfied Keyword arguments Every method additionally accepts the following keyword arguments description::String    A description of the invariant that gives explanation and points to related resources inputfn  identity  A function that is applied to an input before checking Useful when composing multiple invariants Examples Basic usage Successful check Failing check Or just get a Bool Throw an error when an invariant is not satisfied"},{"doctype":"documentation","id":"references/InvariantsCore.AllInvariant","title":"AllInvariant","text":""},{"doctype":"documentation","id":"references/InvariantsCore.CheckResult","title":"CheckResult","text":""},{"doctype":"documentation","id":"references/InvariantsCore.WrapInvariant","title":"WrapInvariant","text":""},{"doctype":"documentation","id":"references/InvariantsCore.title","title":"title","text":"Short summary of an invariant Is used as a title in reports and error messages Part of the  AbstractInvariant  interface"},{"doctype":"documentation","id":"references/Invariants.exampleinvariant","title":"exampleinvariant","text":""},{"doctype":"documentation","id":"references/Invariants.hastype_invariant","title":"hastype_invariant","text":""},{"doctype":"documentation","id":"references/Invariants.FAIL","title":"FAIL","text":""},{"doctype":"documentation","id":"references/Invariants.PASS","title":"PASS","text":""},{"doctype":"documentation","id":"references/Invariants.indent","title":"indent","text":""},{"doctype":"documentation","id":"references/InvariantsCore.InvariantException","title":"InvariantException","text":""},{"doctype":"documentation","id":"references/Invariants","title":"Invariants","text":""},{"doctype":"documentation","id":"references/InvariantsCore.check_throw","title":"check_throw","text":"Check an invariant and provide a detailed error message if it does not pass If it passes return  nothing  Use in tests in combination with  test_nowarn "},{"doctype":"documentation","id":"references/InvariantsCore.showtitle","title":"showtitle","text":""},{"doctype":"documentation","id":"references/InvariantsCore.errormessage","title":"errormessage","text":""},{"doctype":"documentation","id":"references/Invariants.UNKNOWN","title":"UNKNOWN","text":""},{"doctype":"documentation","id":"references/Invariants.md","title":"md","text":""},{"doctype":"documentation","id":"references/InvariantsCore.AbstractInvariant","title":"AbstractInvariant","text":"An  Invariant  checks if an input satisfies some invariant For example it may check whether a number is positive For most use cases using  invariant  to create an invariant will suffice and implementing your own subtype of  AbstractInvariant  will rarely be necessary The interface of  Invariant s is designed so that the invariant can be checked given some input invariants can be composed to generate more complicated invariants the creation of rich error messages is possible when an invariant is not satisfied Interface An  Invariant   I  must implement the following methods title I)::String  Descriptive name for the invariant description I)::String  A longer description of the invariant giving explanation and pointing to related information satisfies I input  nothing  msg  Check whether an  input  satisfies the invariant returning either  nothing  on success or an error message"},{"doctype":"documentation","id":"references/InvariantsCore.check","title":"check","text":"Check an invariant against an input and return a  CheckResult  that gives detailed output in case of an invariant violation Check an invariant against an input returning  true  if satisfied  false  if violated"},{"doctype":"documentation","id":"references/Invariants.faint","title":"faint","text":""},{"doctype":"documentation","id":"references/InvariantsCore.AnyInvariant","title":"AnyInvariant","text":""},{"doctype":"documentation","id":"references/InvariantsCore.satisfies","title":"satisfies","text":"Check if  input  satisfies an  invariant  If it does return  nothing  Otherwise return an error message explaining why the invariant is violated"},{"doctype":"documentation","id":"references/InvariantsCore.format_markdown","title":"format_markdown","text":""},{"doctype":"documentation","id":"references/InvariantsCore.default_format","title":"default_format","text":""},{"doctype":"documentation","id":"references/InvariantsCore.Invariant","title":"Invariant","text":"Default invariant type Use  invariant  to construct invariants"},{"doctype":"documentation","id":"references/InvariantsCore.description","title":"description","text":"Return a more detailed description of an invariant Part of the  AbstractInvariant  interface"},{"doctype":"document","id":"documents/README.md","title":"Invariants","text":"inv n n nothing inv inv Invariants Documentation A Julia package for writing invariants for providing helpful detailed error messages to package users when they misuse the API creating interface test suites as described  here  Designing the package I focused on reusability invariants are easy to define and reuse reducing boilerplate composability invariants can be composed to create more complex invariants rich error messages to be helpful rich error messages should be easy to create Example"},{"doctype":"document","id":"documents/docs/examples.md","title":"Examples","text":"inv_length Base length xs inv_length xs inv_length xs nothing inv_index Base getindex xs idx inv_index xs inv_index xs nothing inv_index xs Examples This page showcases some examples for commonly useful invariants that are either included in Invariants.jl or simple to construct Checking for method implementations hasmethod_invariant  is an invariant that lets us check that a method exists and can be called with the given arguments We construct it with argument names and optional default values and check it by providing a  NamedTuple  input with values for the arguments Checking that the input has a  length  method Functions with side effects To be sure that a working method exists  hasmethod_invariant  runs the functions on the given arguments This means that you should not use it to check functions with side effects or long-running computations We can also construct an invariant that expects multiple arguments and provides default values Here we check that the  getindex  method exists and we can load the element at index 1 If violated the invariant will output  contextual  error messages based on the error encountered If no  getindex  method is defined we are told that a method is missing If there is a method but it throws an error we get a different error message"},{"doctype":"documentation","id":"references/InvariantsCore.InvariantList","title":"InvariantList","text":""},{"doctype":"documentation","id":"references/Invariants.WrapIO","title":"WrapIO","text":""},{"doctype":"document","id":"documents/docs/guide.md","title":"Tutorial","text":"inv n n nothing inv inv inv_indexing length xs xs isempty xs nothing Base getindex xs idx inputfn xs xs inv_indexing inv_indexing nothing inv_indexing inv_indexing Tutorial Invariants.jl gives you the tools to define and compose invariants to give more helpful error messages to package users This page gives an overview of the different features of invariants Defining and checking invariants An invariant is a function that takes an input and either returns an error message if the input does not satisfy the invariant or  nothing  if it does We use the  invariant  function to create them Let's create an invariant that checks whether a number is positive We can then check whether the invariant holds for an input using  check  Checking invariants While  check  gives you a nicely formatted report you can also use  check_bool  to get a Boolean value or  check_throw  to throw an error when an invariant is not satisfied Combining invariants In real use cases many invariants can be logically decomposed into smaller invariants For example interfaces often require a data structure to implement multiple methods We can logically compose invariants with the  invariant(title inv1 inv2   method Let's take the  hasmethod_invariant  helper introduced on the  Examples  page and build an invariant that checks that a data structure supports indexing and is non-empty This has two advantages We can reuse previously defined invariants We get specific error messages based on which constituent invariants were not satisfied Let's see the second point in action by passing in inputs that violate different invariants"},{"doctype":"documentation","id":"references/Invariants.hasmethod_invariant","title":"hasmethod_invariant","text":""},{"doctype":"documentation","id":"references/InvariantsCore.AsMarkdown","title":"AsMarkdown","text":""}]